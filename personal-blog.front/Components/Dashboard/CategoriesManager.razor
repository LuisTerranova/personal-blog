@using personal_blog.core.Handlers
@using personal_blog.core.Models
@using personal_blog.core.Requests.Categories
@using personal_blog.front.Components.Dashboard.Forms
@inject ICategoryHandler Handler
@inject ISnackbar snackbar
@inject IDialogService DialogService

<MudTable @ref="_table" 
          ServerData="new Func<TableState, CancellationToken, Task<TableData<Category>>>(ServerReload)" 
          Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h5" Class="ma-5">Categories</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenForm() ">
            Create
        </MudButton>
        <MudSpacer/>
        <SearchBar @bind-SearchQuery="SearchString"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="pa-5">Id</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Slug</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>   
        <MudTd DataLabel="Title">@context.Title</MudTd>   
        <MudTd DataLabel="Slug">@context.Slug</MudTd>   
        <MudTd DataLabel=""  Class="d-flex justify-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Class="ma-1"
                       OnClick="()=> OpenForm(context.Id)">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Class="ma-1"
                       OnClick="()=> DeleteCategory(context.Id)">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>   

@code {
    private MudTable<Category> _table;
    private string _searchString = "";
    private string SearchString
    {
        get => _searchString;
        set
        {
            _searchString = value;
            _table.ReloadServerData();
        }
    }
    private string? errorMessage;
    
    private async Task<TableData<Category>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            var request = new GetAllCategoriesRequest
            {
                PageNumber = state.Page + 1, 
                PageSize = state.PageSize,
                Query = _searchString
            };

            var result = await Handler.GetAllAsync(request);

            if (result.IsSuccess)
            {
                return new TableData<Category>()
                {
                    TotalItems = result.TotalCount,
                    Items = result.Data ?? new List<Category>()
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            snackbar.Add(errorMessage, Severity.Error);
        }
        return new TableData<Category>() { TotalItems = 0, Items = new List<Category>() };
    }
    
    private async Task OpenForm(int? id = null)
    {
        var parameters = new DialogParameters();

        if (id.HasValue)
        {
            var getResult = await Handler.GetByIdAsync(new GetCategoryByIdRequest { Id = id.Value });

            if (getResult.IsSuccess && getResult.Data != null)
            {
                var updateModel = new UpdateCategoryRequest
                {
                    Id = getResult.Data.Id,
                    Title = getResult.Data.Title
                };
                
                parameters.Add("InitialUpdateModel", updateModel);
            }
            else
            {
                snackbar.Add("Category data not found for editing.", Severity.Error);
                return; 
            }
        }
        
        var dialog = DialogService.Show<CategoryForm>("Create/Edit a Category", parameters);
        var result = await dialog.Result;
        
        if (result.Canceled)
            return;

        try
        {
            if (id == null) 
            {
                var newCategoryRequest = (CreateCategoryRequest)result.Data;
                var createResult = await Handler.CreateAsync(newCategoryRequest);

                if (createResult.IsSuccess)
                {
                    snackbar.Add("Category created successfully!", Severity.Success);
                    await _table.ReloadServerData();
                }
                else
                {
                    snackbar.Add(createResult.Message, Severity.Error);
                }
            }
            else 
            {
                var updateCategoryRequest = (UpdateCategoryRequest)result.Data;
                var updateResult = await Handler.UpdateAsync(updateCategoryRequest);
                
                if (updateResult.IsSuccess)
                {
                    snackbar.Add("Category updated successfully!", Severity.Success);
                    await _table.ReloadServerData();
                }
                else
                {
                    snackbar.Add(updateResult.Message, Severity.Error);
                }
                
            }
        }
        catch(InvalidCastException) 
        {
            snackbar.Add("Form submission failed. Data was not returned correctly.", Severity.Warning);
        }
        catch(Exception ex)
        {
            snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task DeleteCategory(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Do you really want to delete this category? This action cannot be undone.",
            yesText: "Delete!",
            cancelText: "Cancel");

        if (result is true)
        {
            try
            {
                var request = new DeleteCategoryRequest()
                {
                    Id = id
                };
                
                var deleteResult = await Handler.DeleteAsync(request);

                if (deleteResult.IsSuccess)
                {
                    snackbar.Add(deleteResult.Message, Severity.Success);
                    await _table.ReloadServerData();
                }
                else
                {
                    snackbar.Add(deleteResult.Message, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                snackbar.Add("An unexpected error occurred while deleting the category.", Severity.Error);
            }
        }
    }
}