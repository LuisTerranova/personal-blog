@using personal_blog.core.Handlers
@using personal_blog.core.Models
@using personal_blog.core.Requests.Categories
@using personal_blog.front.Components.Dashboard.Forms
@inject ICategoryHandler Handler
@inject ISnackbar snackbar
@inject IDialogService DialogService

<MudTable @ref="_table" 
          ServerData="new Func<TableState, CancellationToken, Task<TableData<Category>>>(ServerReload)" 
          Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h5" Class="ma-5">Categories</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenCreateForm() ">
            Create
        </MudButton>
        <MudSpacer/>
        <SearchBar @bind-SearchQuery="SearchString"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="pa-5">Id</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Slug</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>   
        <MudTd DataLabel="Title">@context.Title</MudTd>   
        <MudTd DataLabel="Slug">@context.Slug</MudTd>   
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 ma-2" Size="Size.Medium">
            Edit
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 ma-2" Size="Size.Medium">
            Delete
        </MudButton>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>   

@code {
    private MudTable<Category> _table;
    private string _searchString = "";
    private string SearchString
    {
        get => _searchString;
        set
        {
            _searchString = value;
            _table.ReloadServerData();
        }
    }
    private string? errorMessage;
    
    private async Task<TableData<Category>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            var request = new GetAllCategoriesRequest
            {
                PageNumber = state.Page + 1, 
                PageSize = state.PageSize,
                Query = _searchString
            };

            var result = await Handler.GetAllAsync(request);

            if (result.IsSuccess)
            {
                return new TableData<Category>()
                {
                    TotalItems = result.TotalCount,
                    Items = result.Data ?? new List<Category>()
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            snackbar.Add(errorMessage, Severity.Error);
        }
        return new TableData<Category>() { TotalItems = 0, Items = new List<Category>() };
    }
    
    private async Task OpenCreateForm()
    {
        var dialog = DialogService.Show<CategoryForm>("Create New Category");
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var newCategoryRequest = (CreateCategoryRequest)result.Data;
            var createResult = await Handler.CreateAsync(newCategoryRequest);

            if (createResult.IsSuccess)
            {
                snackbar.Add("Category created successfully!", Severity.Success);
                await _table.ReloadServerData();
            }
            else
            {
                snackbar.Add(createResult.Message, Severity.Error);
            }
        }
    }
}