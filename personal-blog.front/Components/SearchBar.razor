@using personal_blog.core.Models


<MudTextField T="string"
              ValueChanged="FilterPosts"
              Placeholder="Search..." 
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Clearable="true"
              DebounceInterval="250"/>
@if (ShowCards)
{
    @if (_filteredPosts.Count > 0)
    {
        <PostCard Posts="_filteredPosts"/>
    }
    else
    {
        <PostCard Posts="Posts"/>
    }
}

@code {
    [Parameter] 
    public bool ShowCards { get; set; } = true;

    [Parameter] 
    public List<Post> Posts { get; set; } = [];
    
    [Parameter] 
    public EventCallback<List<Post>> OnFilterChanged { get; set; }

    private List<Post> _filteredPosts =[];
    
    protected override async Task OnParametersSetAsync()
    {
        if (!_filteredPosts.Any() && Posts.Any())
        {
            _filteredPosts = Posts;
            
            await OnFilterChanged.InvokeAsync(_filteredPosts);
        }
    }
    
    private async Task FilterPosts(string searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            _filteredPosts = Posts;
        }
        else
        {
            _filteredPosts = Posts.Where(p => 
                    p.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    p.Body.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        await OnFilterChanged.InvokeAsync(_filteredPosts);
    }
}