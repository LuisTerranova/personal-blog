@typeparam TItem

<MudTextField T="string"
              ValueChanged="FilterItems"
              Placeholder="Search..." 
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Clearable="true"
              DebounceInterval="250"
              Immediate="true"/>

@code {
    [Parameter] public List<TItem?> Items { get; set; } = [];

    [Parameter] public Func<TItem, string, bool>? SearchFunc { get; set; }

    [Parameter] public EventCallback<List<TItem>> OnFilterChanged { get; set; }

    private List<TItem> _filteredItems = [];

    protected override async Task OnParametersSetAsync()
    {
        if (!_filteredItems.Any() && Items.Any())
        {
            _filteredItems = Items;
            await OnFilterChanged.InvokeAsync(_filteredItems);
        }
    }

    private async Task FilterItems(string searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            _filteredItems = Items;
        }
        else
        {
            if (SearchFunc is not null)
            {
                _filteredItems = Items.Where(item => SearchFunc(item, searchQuery)).ToList();
            }
        }

        await OnFilterChanged.InvokeAsync(_filteredItems);
    }

}