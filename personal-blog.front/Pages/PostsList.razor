@page "/posts"
@using personal_blog.core.Handlers
@using personal_blog.core.Models
@using personal_blog.core.Requests.Posts
@using personal_blog.front.Components
@using personal_blog.front.Components.Cards
@inject IPostHandler Handler;

<MudLayout>
    @if (_errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-5">@_errorMessage</MudAlert>
    }
    else
    {
        <MudContainer Class="pa-12">
            
            <SearchBar @bind-SearchQuery="SearchString" />
            @if (_isLoading)
            {
                <MudElement Class="d-flex align-items-center justify-center">
                    <MudProgressCircular Indeterminate="true"
                                         Color="Color.Primary"
                                         Class="my-8"/>
                </MudElement>
            }
            else if (_postsToDisplay.Any())
            {
                <PostCard Posts="_postsToDisplay" />
                <MudPagination Class="d-flex justify-center" Count="TotalPages" 
                               @bind-Selected="CurrentPage"/>
            }
            else
            {
                <MudText Class="d-flex justify-center pa-5 ma-5" 
                         Color="Color.Primary">Nenhum post encontrado.
                </MudText>
            }
        </MudContainer>
    }
</MudLayout>

@code {
    private string? _errorMessage;
    private bool _isLoading;
    private List<Post> _postsToDisplay { get; set; } = [];
    
    private int _totalItems;
    private int _currentPage = 1;
    private int CurrentPage 
    {
        get => _currentPage;
        set 
        {
            if (_currentPage != value) 
            {
                _currentPage = value;
                _ = LoadPostsAsync(_currentPage);
            }
        }
    }
    private int _pageSize = 6; 
    
    private int TotalPages => (int)Math.Ceiling(_totalItems / (double)_pageSize);

    private string? _searchString;

    private string? SearchString
    {
        get => _searchString;
        set
        {
            _searchString = value;
            _ = LoadPostsAsync(1);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPostsAsync(_currentPage);
    }
    
    private async Task OnPageChangedAsync(int newPage)
    {
        await LoadPostsAsync(newPage);
    }
    
    private async Task LoadPostsAsync(int pageNumber)
    {
        _isLoading = true;
        _currentPage = pageNumber; 
        StateHasChanged();

        try
        {
            var request = new GetAllPostsRequest
            {
                Query = _searchString,
                PageNumber = _currentPage,
                PageSize = _pageSize
            };
            
            var result = await Handler.GetAllAsync(request);
            if (result.IsSuccess && result.Data is not null)
            {
                _postsToDisplay = result.Data;
                _totalItems = result.TotalCount;
            }
            else
            {
                _postsToDisplay = [];
                _totalItems = 0;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}