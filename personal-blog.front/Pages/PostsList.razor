@page "/posts"
@using personal_blog.core.Handlers
@using personal_blog.core.Models
@using personal_blog.core.Requests.Posts
@using personal_blog.front.Components
@inject IPostHandler Handler;

<MudLayout>
    @if (_errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-5">@_errorMessage</MudAlert>
    }
    else
    {
        <MudContainer Class="pa-12">
            <SearchBar TItem="Post"
                       Items="Posts"
                       OnFilterChanged="HandleFilterChanged"
                       SearchFunc="@((post, query) => 
                                       post.Title.Contains(query, StringComparison.OrdinalIgnoreCase) ||
                                       post.Body.Contains(query, StringComparison.OrdinalIgnoreCase))" />
            @if (_filteredPosts.Any())
            {
                <PostCard Posts="_filteredPosts" />
            }
            else
            {
                <MudText>Nenhum post encontrado.</MudText>
            }
        </MudContainer>
    }
</MudLayout>

@code {
    private string? _errorMessage;
    private List<Post> Posts { get; set; } = [];
    private List<Post> _filteredPosts = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = new GetAllPostsRequest();
            var result = await Handler.GetAllAsync(request);
            if (result.IsSuccess && result.Data is not null)
            {
                Posts = result.Data;
                _filteredPosts = result.Data;
            }
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = $"An error occurred while fetching posts: {ex.Message}";
        }
        catch(Exception ex)
        {
            _errorMessage = $"An unexpected error occurred. Please try again later. {ex.Message}";
        }
    }
    
    private void HandleFilterChanged(List<Post> filteredListFromSearch)
    {
        _filteredPosts = filteredListFromSearch;
        StateHasChanged();
    }
}